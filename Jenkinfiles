pipeline {
    agent any

    parameters {
        string(name: 'REPO_URLS', defaultValue: '', description: 'Comma-separated list of repository URLs')
    }

    triggers {
        genericTrigger {
            genericVariables {
                genericVariable {
                    key 'github_event'
                    value ''
                }
            }
        }
    }

    stages {
        stage('Check for changes in Repositories') {
            steps {
                script {
                    def urls = params.REPO_URLS.split(',')
                    for (url in urls) {
                        def changeset = sh(returnStdout: true, script: "git log --format='%H' -n 1 ${url}")[0..7]
                        env["${url}_COMMIT"] = changeset.trim()
                    }
                }
            }
        }
        stage('Build Repositories') {
            when {
                expression {
                    def payload = readJSON text: "${env.GENERIC_PAYLOAD}"
                    return env.generic_github_event == 'push' && payload.organization?.login == '3T-LVTN'
                }
            }
            steps {
                script {
                    def urls = params.REPO_URLS.split(',')
                    for (url in urls) {
                        def commit = env["${url}_COMMIT"]
                        when {
                            changeset url, "${commit}..HEAD"
                        }
                        dir("${WORKSPACE}/${url}") {
                            sh 'chmod +x build.sh'
                            sh './build.sh'
                        }
                    }
                }
            }
        }
    }
}
